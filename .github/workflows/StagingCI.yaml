name: ' Staging CI/CD'

on:
  workflow_dispatch:
  push:
    paths-ignore:
      - '**.md'
      - '.github/workflows/*.yaml'
      - '!.github/workflows/StagingCI.yaml'
    branches: [ 'staging' ]
  pull_request:
    paths-ignore:
      - '**.md'
      - '.github/workflows/*.yaml' 
      - '!.github/workflows/StagingCI.yaml'
    branches: [ 'staging' ]

defaults:
  run:
    shell: powershell

permissions:
  actions: read
  contents: read
  id-token: write
  pages: read

env:
  workflowDepth: 1
  ALGoOrgSettings: ${{ vars.ALGoOrgSettings }}
  ALGoRepoSettings: ${{ vars.ALGoRepoSettings }}

jobs:
  Initialization:
    needs: [ ]
    runs-on: [ windows-latest ]
    outputs:
      telemetryScopeJson: ${{ steps.init.outputs.telemetryScopeJson }}
      environmentsMatrixJson: ${{ steps.DetermineDeploymentEnvironments.outputs.EnvironmentsMatrixJson }}
      environmentCount: ${{ steps.DetermineDeploymentEnvironments.outputs.EnvironmentCount }}
      deploymentEnvironmentsJson: ${{ steps.DetermineDeploymentEnvironments.outputs.DeploymentEnvironmentsJson }}
      generateALDocArtifact: ${{ steps.DetermineDeploymentEnvironments.outputs.GenerateALDocArtifact }}
      deployALDocArtifact: ${{ steps.DetermineDeploymentEnvironments.outputs.DeployALDocArtifact }}
      deliveryTargetsJson: ${{ steps.DetermineDeliveryTargets.outputs.DeliveryTargetsJson }}
      githubRunner: ${{ steps.ReadSettings.outputs.GitHubRunnerJson }}
      githubRunnerShell: ${{ steps.ReadSettings.outputs.GitHubRunnerShell }}
      projects: ${{ steps.determineProjectsToBuild.outputs.ProjectsJson }}
      skippedProjects: ${{ steps.determineProjectsToBuild.outputs.SkippedProjectsJson }}
      projectDependenciesJson: ${{ steps.determineProjectsToBuild.outputs.ProjectDependenciesJson }}
      buildOrderJson: ${{ steps.determineProjectsToBuild.outputs.BuildOrderJson }}
      baselineWorkflowRunId: ${{ steps.determineProjectsToBuild.outputs.BaselineWorkflowRunId }}
      baselineWorkflowSHA: ${{ steps.determineProjectsToBuild.outputs.BaselineWorkflowSHA }}
      workflowDepth: ${{ steps.DetermineWorkflowDepth.outputs.WorkflowDepth }}
      powerPlatformSolutionFolder: ${{ steps.DeterminePowerPlatformSolutionFolder.outputs.powerPlatformSolutionFolder }}
    steps:
      - name: Dump Workflow Information
        uses: microsoft/AL-Go-Actions/DumpWorkflowInfo@main
        with:
          shell: powershell

      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          lfs: true

      - name: Initialize the workflow
        id: init
        uses: microsoft/AL-Go-Actions/WorkflowInitialize@main
        with:
          shell: powershell

      - name: Read settings
        id: ReadSettings
        uses: microsoft/AL-Go-Actions/ReadSettings@main
        with:
          shell: powershell
          get: useGitSubmodules

      - name: Read submodules token
        id: ReadSubmodulesToken
        if: env.useGitSubmodules != 'false' && env.useGitSubmodules != ''
        uses: microsoft/AL-Go-Actions/ReadSecrets@main
        with:
          shell: powershell
          gitHubSecrets: ${{ toJson(secrets) }}
          getSecrets: '-gitSubmodulesToken'

      - name: Checkout Submodules
        if: env.useGitSubmodules != 'false' && env.useGitSubmodules != ''
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          lfs: true
          submodules: ${{ env.useGitSubmodules }}
          token: '${{ fromJson(steps.ReadSubmodulesToken.outputs.Secrets).gitSubmodulesToken }}'

      - name: Determine Workflow Depth
        id: DetermineWorkflowDepth
        run: |
          Add-Content -Encoding UTF8 -Path $env:GITHUB_OUTPUT -Value "WorkflowDepth=$($env:workflowDepth)"

      - name: Determine Projects To Build
        id: determineProjectsToBuild
        uses: microsoft/AL-Go-Actions/DetermineProjectsToBuild@main
        with:
          shell: powershell
          maxBuildDepth: ${{ env.workflowDepth }}

      - name: Determine Delivery Target Secrets
        id: DetermineDeliveryTargetSecrets
        uses: microsoft/AL-Go-Actions/DetermineDeliveryTargets@main
        with:
          shell: powershell
          projectsJson: '${{ steps.determineProjectsToBuild.outputs.ProjectsJson }}'
          checkContextSecrets: 'false'

      - name: Read secrets
        id: ReadSecrets
        if: github.event_name != 'pull_request'
        uses: microsoft/AL-Go-Actions/ReadSecrets@main
        with:
          shell: powershell
          gitHubSecrets: ${{ toJson(secrets) }}
          getSecrets: '${{ steps.DetermineDeliveryTargetSecrets.outputs.ContextSecrets }}'

      - name: Determine Delivery Targets
        id: DetermineDeliveryTargets
        uses: microsoft/AL-Go-Actions/DetermineDeliveryTargets@main
        with:
          shell: powershell
          projectsJson: '${{ steps.determineProjectsToBuild.outputs.ProjectsJson }}'
          secrets: '${{ steps.ReadSecrets.outputs.Secrets }}'

      - name: Determine Deployment Environments
        id: DetermineDeploymentEnvironments
        uses: microsoft/AL-Go-Actions/DetermineDeploymentEnvironments@main
        with:
          shell: powershell
          getEnvironments: '${{ github.event_name == ''push'' }}'
          type: 'Staging'

      - name: Determine Power Platform Solution Folder
        id: DeterminePowerPlatformSolutionFolder
        uses: microsoft/AL-Go-Actions/DeterminePowerPlatformSolutionFolder@main
        with:
          shell: powershell

  Build:
    needs: [ Initialization ]
    if: (!failure()) && (!cancelled()) && fromJson(needs.Initialization.outputs.buildOrderJson)[0].projectsCount > 0
    strategy:
      matrix:
        include: ${{ fromJson(needs.Initialization.outputs.buildOrderJson)[0].buildDimensions }}
      fail-fast: false
    name: Build ${{ matrix.projectName }} (${{ matrix.buildMode }})
    uses: ./.github/workflows/_BuildALGoProject.yaml
    secrets: inherit
    with:
      shell: ${{ matrix.githubRunnerShell }}
      runsOn: ${{ matrix.githubRunner }}
      project: ${{ matrix.project }}
      projectName: ${{ matrix.projectName }}
      buildMode: ${{ matrix.buildMode }}
      projectDependenciesJson: ${{ needs.Initialization.outputs.projectDependenciesJson }}
      secrets: 'licenseFileUrl,codeSignCertificateUrl,*codeSignCertificatePassword,keyVaultCertificateUrl,*keyVaultCertificatePassword,keyVaultClientId,gitHubPackagesContext,applicationInsightsConnectionString'
      artifactsNameSuffix: 'Staging'

  Deploy:
    needs: [ Initialization, Build ]
    if: always() && (!cancelled()) && ((!failure()) || (github.event_name == 'push')) && needs.Initialization.outputs.environmentCount > 0
    strategy:
      matrix:
        include: ${{ fromJson(needs.Initialization.outputs.environmentsMatrixJson) }}
      fail-fast: false
    runs-on: ${{ fromJson(matrix.githubRunner) }}
    defaults:
      run:
        shell: ${{ matrix.githubRunnerShell }}
    name: Deploy to ${{ matrix.environment }}
    environment:
      name: ${{ matrix.environment }}
      url: ${{ steps.Deploy.outputs.environmentUrl }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Download artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          path: '.artifacts'

      - name: Read settings
        uses: microsoft/AL-Go-Actions/ReadSettings@main
        with:
          shell: ${{ matrix.githubRunnerShell }}

      - name: Read secrets
        id: ReadSecrets
        uses: microsoft/AL-Go-Actions/ReadSecrets@main
        with:
          shell: ${{ matrix.githubRunnerShell }}
          gitHubSecrets: ${{ toJson(secrets) }}
          getSecrets: '${{ matrix.envSecrets }}'
          useGhTokenWorkflowForPush: '${{ github.event_name == ''push'' }}'

      - name: Deploy
        id: Deploy
        uses: microsoft/AL-Go-Actions/Deploy@main
        env:
          Secrets: '${{ steps.ReadSecrets.outputs.Secrets }}'
        with:
          shell: ${{ matrix.githubRunnerShell }}
          environmentName: ${{ matrix.environment }}
          artifacts: '.artifacts'
          type: 'Staging'

  Deliver:
    needs: [ Initialization, Build ]
    if: always() && (!cancelled()) && ((!failure()) || (github.event_name == 'push')) && needs.Initialization.outputs.deliveryTargetsJson != '[]'
    strategy:
      matrix:
        deliveryTarget: ${{ fromJson(needs.Initialization.outputs.deliveryTargetsJson) }}
      fail-fast: false
    runs-on: [ windows-latest ]
    defaults:
      run:
        shell: powershell
    name: Deliver to ${{ matrix.deliveryTarget }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Download artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          path: '.artifacts'

      - name: Read settings
        uses: microsoft/AL-Go-Actions/ReadSettings@main
        with:
          shell: powershell

      - name: Read secrets
        id: ReadSecrets
        uses: microsoft/AL-Go-Actions/ReadSecrets@main
        with:
          shell: powershell
          gitHubSecrets: ${{ toJson(secrets) }}
          getSecrets: 'ghTokenWorkflow,${{ matrix.deliveryTarget }}Context'
          useGhTokenWorkflowForPush: '${{ github.event_name == ''push'' }}'

      - name: Deliver
        uses: microsoft/AL-Go-Actions/Deliver@main
        env:
          Secrets: '${{ steps.ReadSecrets.outputs.Secrets }}'
        with:
          shell: powershell
          type: 'Staging'
          projects: '${{ needs.Initialization.outputs.projects }}'
          deliveryTarget: ${{ matrix.deliveryTarget }}
          artifacts: '.artifacts'

  PostProcess:
    needs: [ Initialization, Build, Deploy, Deliver ]
    if: always()
    runs-on: [ windows-latest ]
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Finalize the workflow
        id: PostProcess
        uses: microsoft/AL-Go-Actions/WorkflowPostProcess@main
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          shell: powershell
          telemetryScopeJson: ${{ needs.Initialization.outputs.telemetryScopeJson }}
          currentJobContext: ${{ toJson(job) }}